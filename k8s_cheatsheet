# Kubernetes Cheat Sheet - By Kunal Raykar

########## Nodes Commands ##########
# kubectl get nodes 
# kubectl get no -o wide 

# kubectl drain node01 --ignore-daemonsets            => Evict all pods from node01 and marks it un-schedulable 
# kubectl drain node01 --ignore-daemonsets --force    => Use --force if you need evict pods that are not under replicaset 
# kubectl cordon node01                               => Make node un-schedulable for pods. Drain commands does cordon 
# kubectl uncordon node01                             => Make node schedulable for pods  

# kubectl taint nodes node01 appkey=bluevalue:NoSchedule         => Taint node with Values- key=value:effect (NoSchedule|PreferNoSchedule|NoExecute)
# kubectl taint nodes node01 appkey=bluevalue:NoExexute -o yaml  => Pushing node config in yaml so same code can be used in pod yaml for tolerations
# kubectl taint nodes node01 appkey-                  => Remove taint from node

# kubectl get nodes --show-labels                    => Show all labels of nodes
# kubectl label nodes node01 largekey=largevalue     => Label should be key=value format
# kubectl get nodes -l largekey=largevalue           => Show nodes with key largekey
# kubectl label nodes node01 largekey-               => Delete labels from the nodes

########## Monitoring and Logging Commands ##########

Install the metric server 

# git clone https://github.com/kodekloudhub/kubernetes-metrics-server.git
# kubectl create -f .         => Commad fired under the server clonned repository

# kubectl top nodes
# kubectl top pods 
# kubectl top pods --sort-by=cpu                  => Sort Pods with CPU usage
# kubectl top pods --sort-by=memory               => Sort Pods with Mem Usage
# Kubectl top pods --all-namespaces 

# kubectl logs nginx-pod
# kubectl logs nginx-pod -c nginx-container       => Provide -c option when pod contain more than one container
# kubectl logs --since=1h nginx-pod 
# kubectl logs --tail=20 nginx-pod 

########## Pods Commands ##########
# kubectl get po
# kubectl get po -o wide
# kubectl get po -n mynamespace 
# kubectl get po --all-namespaces
# kubectl get po --show-labels

# kubectl create -f mypod.yaml 
# kubectl describe pod mypod

# kubectl exec -it mypod -- /bin/bash                   => Login into container using shell
# kubectl exec mypod ps -ef                             => Run command in contianer without interactive shell 
# kubectl exec -it mypod --container sidecar -- /bin/bash     => Login into sidecar container using whell 

# kubectl get pod my-pod -o yaml                                    => Get a pod's YAML
# kubectl get pod etcd-master -o yaml -n kube-system                => Generate yaml output of etcd-master pod of kube-system ns

# kubectl run --generator=run-pod/v1 mypod --image=redis                            => Create pod from command line without yaml file
# kubectl run --generator=run-pod/v1 mypod100 --image=nginx --port=2379 --dry-run   => Dry-run of pod creation with specfic spec
# kubectl run --generator=run-pod/v1 mypod200 --image=nginx --namespace=mydev       => Run pod in specific namespace

# kubectl delete pod/mypod                            => Delte pods of mypods 
# kubectl delete pods -l name=my-app                  => Delete pods where label - name=my-app

########## ReplicaSet Commands ##########
# kubectl get rs 
# kubectl get rs -o wide 
# kubectl create -f myreplica-set.yaml 
# kubectl describe rs myreplica-set

# kubectl scale --replicas=5 rs/myreplica-set          => Scale up Replicas in Deployment 
# kubectl scale --replicas=2 rs/myreplica-set          => Scale down Replicas in Deployment 

# kubectl delete rs/myreplica-set                      => Delte ReplicaSet and the pods associated with ReplicaSet

########## DaemonSets Commands ##########
# kubectl get ds 
# kubectl get ds --all-namespaces
# kubectl get ds -o wide -n kube-system 

# kubectl describe ds kube-proxy -n kube-system       => Describe kube-proxy in ns - kube-system 

########## Deployment Commands ##########
# kubectl get deploy
# kubectl get deploy -o wide
# kubectl get deploy mydeploy -o yaml                  => Get a deployment's YAML output on screen
# kubectl create -f mynginx-deploy.yaml 
# kubectl describe deploy mynginx-deploy 

# kubectl create deploy mydeploy --image=nginx                      => Creating deployment using command line 
# Kubectl create deploy mydeploy --image=nginx --dry-run -o yaml    => Running dry-run of deploy and get yaml output on screen

# kubectl scale --replicas=5 deploy/mynginx-deploy --record      => Scale up Replicas in Deployment 
# kubectl scale --replicas=2 deploy/mynginx-deploy --record     => Scale down Replicas in Deployment 

# kubectl delete deploy/mynginx-deploy                  => Delte Deployment and all rs and pods of the deployment 

Rolling Update in Deployment 

# kubectl create -f nginx-deploy.yaml --record 		=> Record options records the commands fired as part of rollout procedure
# kubectl edit deploy nginx-deploy 					      => Edit the deployment and make changes 
# kubectl rollout status deploy nginx-deploy 		  => Check the status of deployment. Changes that were performed 
# kubectl rollout pause deploy nginx-deploy 		  => Pause the deployment in between in onging process
# kubectl rollout resume deploy nginx-deploy 		  => Resume the deployment that was paused
# kubectl set image deploy nginx-deploy nginx=nginx:1.17 --record     => Increase the version of the deployment 
# kubectl rollout history deploy nginx-deploy     => Shows the history of the deployment 

# kubectl rollout undo deploy nginx-deploy 			  => Undo the deployment 

# kubectl get all                 => Shows all object in the namespace 
# kubectl get events              => Shows all events of Objects 

########## Namespace Commands ##########
# kubectl get namespace 
# kubectl create namespace mydev-ns
# kubectl describe namespace mydev-ns

# kubectl delete namespace mydev

########## Service Commands ##########
# kubectl get svc 
# kubectl get svc -o wide 

# kubectl create -f mysvc.yaml 
# kubectl describe mysvc 
# kubectl expose deploy mydeploy --port=3300 --target-port=3300 --name=mysvc -o yaml    => Creates svc using command line for deploy and get yaml output

########## Configmap Commands ##########
# kubectl get configmap 
# kubectl create configmap nginx-configmap
# kubectl describe configmap nginx-configmap 
# kubectl create configmap nginx-configmap --dry-run -o yaml > nginx-confimap.yaml 
# kubectl create configmap nginx-configmap --from-literal=NAME=Kunal --from-literal=ZONE=EU
# kubectl delete configmap nginx-configmap 

########## Secrets Commands ##########
# kubectl get secret
# kubectl create secret generic nginx-secrets 
# kubectl describe secret nginx-secrets
# kubectl create secret generic nginx-secrets --from-literal=USER=root --from-literal=PASSWD=pass123 
# kubectl delete secret nginx-secret 

# echo NAME | base64                    => Command base64 will encode string 
# echo aw34huty | base64 --decode       => Command base64 with decode will decode the string

########## Certificate Signing Request ##########
# openssl genrsa -out kunal.key 4096                                => Generate the key for Kunal user
# openssl req -new -key /root/kunal.key -out /root/kunal.csr        => Generate CSR for kunal.key 

Creating CSR object 

# vi  kunal-csr.yaml 
apiVersion: certificates.k8s.io/v1beta1
kind: CertificateSigningRequest
metadata:
  name: kunal
spec:
  groups:
  - system:authenticated
  request: ${BASE64_CSR}
  usages:
  - digital signature
  - key encipherment
  - server auth
  - client auth

# export BASE64_CSR=$(cat ./kunal.csr | base64 | tr -d '\n')
# cat kunal-csr.yaml | envsubst | kubectl apply -f -

# kubectl get csr kunal -o jsonpath='{.status.certificate}' \
  | base64 --decode > kunal.crt                                        => Create Certificate file from csr 

# openssl x509 -in /root/kunal.crt -noout -text                        => Check the Certificate details
# openssl x509 -in /etc/kubernetes/pki/server.crt                      => Check details of the Apiserver certificate 

# kubectl get csr                       => Get details of the csr objects 
# kubectl get csr kunal -o yaml         => Get details of csr key in yaml format 
# kubectl certificate approve kunal     => Approve the pending csr request 
# kubectl certificate deny kunal        => Deny the csr request 

########## Role and RoleBinding ##########
Roles in the K8s cluster 

# kubectl get roles 
# kubectl get roles --all-namespaces 
# kubectl describe role weave-net -n kube-system 
# kubectl create role dev-user --verb=list,get,create --resource=pods,configmaps -n mynamespace
# kubectl delete role dev-user -n mynamespace

RoleBindings in the K8s cluster

# kubectl get rolebindings
# kubectl get rolebindings --all-namespaces
# kubectl describe rolebinding -n kube-system weave-net 
# kubectl create rolebinding dev-user-binding --role=developer --user=dev-user -n mynamespace
# kubectl delete rolebindings dev-userbinding -n mynamespace

# kubectl auth can-i get pods --as dev-user
# kubectl get pods --as dev-user -n mynamespace

########## Cluster Roles and Cluster Role bindings ##########
ServiceAccount in the Cluster 
# kubectl get serviceaccount
# kubectl create serviceaccount pod-reader 
# kubectl describe serviceaccount pod-reader 
# kubectl delete serviceaccount pod-reader 

Cluster Roles in the K8s Cluster
# kubectl get clusterrole 
# kubectl create clusterrole pod-reader-role --resource=pods,persistentvolume --verb=list 
# kubectl describe clusterrole pod-reader-role 
# kubectl delete clusterrole pod-reader-role 

Clusterrolebindings in the K8s Cluster
# kubectl create clusterrolebinding pod-reader-binding --clusterrole=pod-reader-role --serviceaccount=default:pod-reader
# kubectl get clsuterrolebinding 
# kubectl describe clusterrolebinding pod-reader-binding 
# kubectl delete clusterrolebinding pod-reader-binding

########## Etcd Backup and restore ##########

Backup and Restore procedure of etcd database 

https://github.com/mmumshad/kubernetes-the-hard-way/blob/master/practice-questions-answers/cluster-maintenance/backup-etcd/etcd-backup-and-restore.md

BACKUP of the ectd server 

ETCDCTL_API=3 etcdctl \
--endpoints=https://[127.0.0.1]:2379 \
--cacert=/etc/kubernetes/pki/etcd/ca.crt \
--cert=/etc/kubernetes/pki/etcd/server.crt \
--key=/etc/kubernetes/pki/etcd/server.key \
snapshot save /tmp/snapshot-pre-boot.db

RESTORE from the backup taken 

ETCDCTL_API=3 etcdctl \
--endpoints=https://[127.0.0.1]:2379 \
--cacert=/etc/kubernetes/pki/etcd/ca.crt \
--cert=/etc/kubernetes/pki/etcd/server.crt \
--key=/etc/kubernetes/pki/etcd/server.key \
--name=master \
--data-dir /var/lib/etcd-from-backup \
--initial-cluster=master=https://127.0.0.1:2380 \
--initial-advertise-peer-urls=https://127.0.0.1:2380 \
--initial-cluster-token etcd-cluster-1 \
snapshot restore /tmp/snapshot-pre-boot.db

########## Cluster Upgrade ##########

# kubeadm version 
# kubeadm upgrade plan 

On Master 
# kubectl drain master --ignore-daemonsets 
# apt install -y kubeadm=1.12.0-00
# kubeadm upgrade apply v1.12.0
# apt install kubelet=1.12.0-00 
# systemctl restart kubelet 
# kubectl uncordon master 

On Node
# kubectl drain node01 --ignore-daemonsets 
# apt install kubeadm=1.12.0-00

# ssh node01 
# apt install kubelet=1.12.0-00
# systemctl restart kubelet 
# kubeadm upgrade node config --kubelet-version v1.12.0 
# kubectl uncordon node01 

# kubectl cluster-info 
# kubectl cluster-info dump > cluster-info.dump 	=> Dump all info of cluster in file 

