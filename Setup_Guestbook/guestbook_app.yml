#Creating the namespace Prod
apiVersion: v1
kind: Namespace
metadata:
  name: prod
---
#Creating the redis-master service
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: prod
  labels:
    app: redis
    tier: backend
    role: master
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    tier: backend
    role: master
---
#Creating redis master pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis-master
  namespace: prod
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: gcr.io/google_containers/redis:e2e  # or just image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
#Creating the redis slave service
apiVersion: v1
kind: Service
metadata:
  name: redis-slave
  namespace: prod
  labels:
    app: redis
    tier: backend
    role: slave
spec:
  ports:
  - port: 6379
  selector:
    app: redis
    tier: backend
    role: slave
---
#Creating the redis slave pods
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis-slave
  namespace: prod
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: redis
        role: slave
        tier: backend
    spec:
      containers:
      - name: slave
        image: gcr.io/google_samples/gb-redisslave:v1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below:
          # value: env
        ports:
        - containerPort: 6379
---
#Creating the fronend service for frontend pod
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: prod
  labels:
    app: guestbook
    tier: frontend
spec:
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: guestbook
    tier: frontend
---
#Creating the frontend pods
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: frontend
  namespace: prod
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: guestbook
        tier: frontend
    spec:
      containers:
      - name: php-redis
        image: gcr.io/google-samples/gb-frontend:v4
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below:
          # value: env
        ports:
        - containerPort: 80
---
#Creating the Ingress resources
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: guestbook-ingress
  namespace: prod
spec:
  rules:
  - host: guestbook.kunalvm.io
    http:
      paths:
      - backend:
          serviceName: frontend
          servicePort: 80
---
